#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <Arduino_JSON.h>
#include "Freenove_WS2812_Lib_for_ESP32.h"
#include <ArduinoOTA.h>
#define LEDS_COUNT  77
#define LEDS_PIN	27
#define CHANNEL		0
const char* ssid     = "XXXXX";
const char* password = "XXXXX";
const char* serverName = "http://cdn.tmep.cz/app/export/okresy-cr-teplota.json";
unsigned long lastTime = 0;
unsigned long timerDelay = 60000;
int lastid, value, color;
Freenove_ESP32_WS2812 strip = Freenove_ESP32_WS2812(LEDS_COUNT, LEDS_PIN, CHANNEL, TYPE_GRB);
String sensorReadings;
float sensorReadingsArr[3];
boolean FirstRun = true;

void OTA() {
   ArduinoOTA
    .onStart([]() {
      String type;
      if (ArduinoOTA.getCommand() == U_FLASH)
        type = "sketch";
      else // U_SPIFFS
        type = "filesystem";

      // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS using SPIFFS.end()
      Serial.println("Start updating " + type);
    })
    .onEnd([]() {
      Serial.println("\nEnd");
    })
    .onProgress([](unsigned int progress, unsigned int total) {
      Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    })
    .onError([](ota_error_t error) {
      Serial.printf("Error[%u]: ", error);
      if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
      else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
      else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
      else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
      else if (error == OTA_END_ERROR) Serial.println("End Failed");
    });

  ArduinoOTA.begin();

  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}


String httpGETRequest(const char* serverName) {
  WiFiClient client;
  HTTPClient http;
  http.begin(client, serverName);
  int httpResponseCode = http.GET();
  String payload = "{}"; 
  if (httpResponseCode>0) {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    payload = http.getString();
  }
  else {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }
  http.end();
  return payload;
}

void setup()
{
    Serial.begin(9600);
    delay(10);
    Serial.println();
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    OTA();
    strip.begin();
    strip.setBrightness(10); 
}
void loop() {
ArduinoOTA.handle(); 

  if ((millis() - lastTime) > timerDelay || FirstRun) {
    FirstRun = false; 
    if(WiFi.status()== WL_CONNECTED){   
     sensorReadings = httpGETRequest(serverName);
      JSONVar myObject = JSON.parse(sensorReadings);
      if (JSON.typeof(myObject) == "undefined") {
        Serial.println("Parsing input failed!");
        return;
      } 
      String tmp;
      float maxTemp = -99;
      float minTemp =  99;
      for (int i = 0; i < 77; i++) {
       tmp = JSON.stringify(myObject[i]["h"]);
       if (tmp.toFloat() < minTemp) minTemp = tmp.toFloat();
       if (tmp.toFloat() > maxTemp) maxTemp = tmp.toFloat();
      }
      for (int i = 0; i < 77; i++) {
       strip.setLedColorData(i+3, 0, 0, 0);
       strip.setLedColorData(i+2, 0, 0, 0);
       strip.setLedColorData(i+1, 255, 255, 255);
       color = map(myObject[i]["h"], minTemp, maxTemp, 170, 0);  
       strip.setLedColorData(i, strip.Wheel(color));
       strip.show();
       delay(30);
      }
      
    }
    else {
      Serial.println("WiFi Disconnected");
    }
    lastTime = millis();
  }
}
